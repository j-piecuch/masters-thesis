@inproceedings{multics,
author = {Corbat\'{o}, F. J. and Vyssotsky, V. A.},
title = {Introduction and Overview of the Multics System},
year = {1965},
isbn = {9781450378857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1463891.1463912},
doi = {10.1145/1463891.1463912},
abstract = {Multics (Multiplexed Information and Computing Service) is a comprehensive, general-purpose programming system which is being developed as a research project. The initial Multics system will be implemented on the GE 645 computer. One of the overall design goals is to create a computing system which is capable of meeting almost all of the present and near-future requirements of a large computer utility. Such systems must run continuously and reliably 7 days a week, 24 hours a day in a way similar to telephone or power systems, and must be capable of meeting wide service demands: from multiple man-machine interaction to the sequential processing of absentee-user jobs; from the use of the system with dedicated languages and subsystems to the programming of the system itself; and from centralized bulk card, tape, and printer facilities to remotely located terminals. Such information processing and communication systems are believed to be essential for the future growth of computer use in business, in industry, in government and in scientific laboratories as well as stimulating applications which would be otherwise undone.},
booktitle = {Proceedings of the November 30--December 1, 1965, Fall Joint Computer Conference, Part I},
pages = {185â€“196},
numpages = {12},
location = {Las Vegas, Nevada},
series = {AFIPS '65 (Fall, part I)}
}
@book{unix-book,
author = {Bach, Maurice J.},
title = {The Design of the UNIX Operating System},
year = {1986},
isbn = {0132017997},
publisher = {Prentice-Hall, Inc.},
address = {USA}
}
@misc{posix,
  title = {{The Open Group Base Specifications Issue 7, 2018 edition}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{fork,
  title = {\texttt{fork} - create a new process},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{setpgid,
  title = {\texttt{setpgid} - set process group {ID} for job control},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/setpgid.html}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{terminal-access,
  title = {{Terminal Access Control}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap11.html#tag_11_01_04}},
  note = {\\ Accessed: 19/11/2020}
}
@misc{readline,
  title = {{The GNU Readline Library}},
  howpublished = {\\ \url{https://tiswww.case.edu/php/chet/readline/rltop.html}},
  note = {\\ Accessed: 23/11/2020}
}
@misc{termios,
  title = {\texttt{termios.h} - define values for termios},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/termios.h.html}},
  note = {\\ Accessed: 23/11/2020}
}
@misc{tcsetattr,
  title = {\texttt{tcsetattr} - set the parameters associated with the terminal},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/tcsetattr.html}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{tcgetattr,
  title = {\texttt{tcgetattr} - get the parameters associated with the terminal},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/tcgetattr.html}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{tcgetpgrp,
  title = {{\texttt{tcgetpgrp} - get the foreground process group ID}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/tcsetpgrp.html}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{tcsetpgrp,
  title = {{\texttt{tcsetpgrp} - set the foreground process group ID}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/tcsetpgrp.html}},
  note = {\\ Accessed: 17/11/2020}
}
@misc{sigaction,
  title = {{\texttt{sigaction} - examine and change a signal action}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/sigaction.html}},
  note = {\\ Accessed: 29/01/2021}
}
@misc{sigprocmask,
  title = {{\texttt{sigprocmask} - examine and change blocked signals}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/sigprocmask.html}},
  note = {\\ Accessed: 29/01/2021}
}
@misc{kill,
  title = {{\texttt{kill} - send a signal to a process or a group of processes}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/kill.html}},
  note = {\\ Accessed: 29/01/2021}
}
@misc{wait,
  title = {{\texttt{wait, waitpid} - wait for a child process to stop or terminate}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/waitpid.html}},
  note = {\\ Accessed: 25/02/2021}
}
@misc{setsid,
  title = {{\texttt{setsid} - create session and set process group ID}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/setsid.html}},
  note = {\\ Accessed: 25/02/2021}
}
@misc{posix-openpt,
  title = {{\texttt{posix\_openpt} - open a pseudo-terminal device}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/posix_openpt.html}},
  note = {\\ Accessed: 23/04/2021}
}
@misc{ptsname,
  title = {{\texttt{ptsname} - get name of the slave pseudo-terminal device}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/ptsname.html}},
  note = {\\ Accessed: 23/04/2021}
}
@misc{poll,
  title = {{\texttt{poll} - input/output multiplexing}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/poll.html}},
  note = {\\ Accessed: 11/05/2021}
}
@misc{select,
  title = {{\texttt{pselect, select} - synchronous I/O multiplexing}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/select.html}},
  note = {\\ Accessed: 11/05/2021}
}
@misc{setitimer,
  title = {{\texttt{getitimer}, \texttt{setitimer} - get and set value of interval timer}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/select.html}},
  note = {\\ Accessed: 11/05/2021}
}
@misc{restart-syscall,
  title = {{\texttt{restart\_syscall} - restart a system call after interruption by a
       stop signal}},
  howpublished = {\\ \url{https://man7.org/linux/man-pages/man2/restart_syscall.2.html}},
  note = {\\ Accessed: 11/05/2021}
}
@misc{stty,
  title = {{\texttt{stty} - set the options for a terminal}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/utilities/stty.html}},
  note = {\\ Accessed: 07/05/2021}
}
@misc{uio-man,
  title = {{\texttt{uio}, \texttt{uiomove}, \texttt{uiomove\_frombuf}, \texttt{uiomove\_nofault} - device driver I/O routines}},
  howpublished = {\\ \url{https://www.freebsd.org/cgi/man.cgi?query=uio&manpath=FreeBSD+12.2-RELEASE+and+Ports}},
  note = {\\ Accessed: 07/05/2021}
}
@book{apue,
author = {Stevens, W. Richard and Rago, Stephen A.},
title = {Advanced Programming in the UNIX Environment},
year = {2013},
isbn = {0321637739},
publisher = {Addison-Wesley Professional},
edition = {3rd},
abstract = {For more than twenty years, serious C programmers have relied on one book for practical, in-depth knowledge of the programming interfaces that drive the UNIX and Linux kernels: W. Richard Stevens Advanced Programming in the UNIX Environment . Now, once again, Richs colleague Steve Rago has thoroughly updated this classic work. The new third edition supports todays leading platforms, reflects new technical advances and best practices, and aligns with Version 4 of the Single UNIX Specification. Steve carefully retains the spirit and approach that have made this book so valuable. Building on Richs pioneering work, he begins with files, directories, and processes, carefully laying the groundwork for more advanced techniques, such as signal handling and terminal I/O. He also thoroughly covers threads and multithreaded programming, and socket-based IPC. This edition covers more than seventy new interfaces, including POSIX asynchronous I/O, spin locks, barriers, and POSIX semaphores. Most obsolete interfaces have been removed, except for a few that are ubiquitous. Nearly all examples have been tested on four modern platforms: Solaris 10, Mac OS X version 10.6.8 (Darwin 10.8.0), FreeBSD 8.0, and Ubuntu version 12.04 (based on Linux 3.2). As in previous editions, youll learn through examples, including more than ten thousand lines of downloadable, ISO C source code. More than four hundred system calls and functions are demonstrated with concise, complete programs that clearly illustrate their usage, arguments, and return values. To tie together what youve learned, the book presents several chapter-length case studies, each reflecting contemporary environments. Advanced Programming in the UNIX Environment has helped generations of programmers write code with exceptional power, performance, and reliability. Now updated for todays systems, this third edition will be even more valuable.}
}
@misc{terminal-spec,
  title = {{General Terminal Interface}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap11.html}},
  note = {\\ Accessed: 13/04/2021}
}
@book{tlpi,
author = {Kerrisk, Michael},
title = {The Linux Programming Interface: A Linux and UNIX System Programming Handbook},
year = {2010},
isbn = {1593272200},
publisher = {No Starch Press},
address = {USA},
edition = {1st},
abstract = {The Linux Programming Interface is the definitive guide to the Linux and UNIX programming interfacethe interface employed by nearly every application that runs on a Linux or UNIX system. In this authoritative work, Linux programming expert Michael Kerrisk provides detailed descriptions of the system calls and library functions that you need in order to master the craft of system programming, and accompanies his explanations with clear, complete example programs. You'll find descriptions of over 500 system calls and library functions, and more than 200 example programs, 88 tables, and 115 diagrams. You'll learn how to: Read and write files efficiently Use signals, clocks, and timers Create processes and execute programs Write secure programs Write multithreaded programs using POSIX threads Build and use shared libraries Perform interprocess communication using pipes, message queues, shared memory, and semaphores Write network applications with the sockets API While The Linux Programming Interface covers a wealth of Linux-specific features, including epoll, inotify, and the /proc file system, its emphasis on UNIX standards (POSIX.1-2001/SUSv3 and POSIX.1-2008/SUSv4) makes it equally valuable to programmers working on other UNIX platforms. The Linux Programming Interface is the most comprehensive single-volume work on the Linux and UNIX programming interface, and a book that's destined to become a new classic. Praise for The Linux Programming Interface "If I had to choose a single book to sit next to my machine when writing software for Linux, this would be it." Martin Landers, Software Engineer, Google "This book, with its detailed descriptions and examples, contains everything you need to understand the details and nuances of the low-level programming APIs in Linux . . . no matter what the level of reader, there will be something to be learnt from this book." Mel Gorman, Author of Understanding the Linux Virtual Memory Manager "Michael Kerrisk has not only written a great book about Linux programming and how it relates to various standards, but has also taken care that bugs he noticed got fixed and the man pages were (greatly) improved. In all three ways, he has made Linux programming easier. The in-depth treatment of topics in The Linux Programming Interface . . . makes it a must-have reference for both new and experienced Linux programmers." Andreas Jaeger, Program Manager, openSUSE, Novell "Michael's inexhaustible determination to get his information right, and to express it clearly and concisely, has resulted in a strong reference source for programmers. While this work is targeted at Linux programmers, it will be of value to any programmer working in the UNIX/POSIX ecosystem." David Butenhof, Author of Programming with POSIX Threads and Contributor to the POSIX and UNIX Standards ". . . a very thoroughyet easy to readexplanation of UNIX system and network programming, with an emphasis on Linux systems. It's certainly a book I'd recommend to anybody wanting to get into UNIX programming (in general) or to experienced UNIX programmers wanting to know 'what's new' in the popular GNU/Linux system." Fernando Gont, Network Security Researcher, IETF Participant, and RFC Author ". . . encyclopedic in the breadth and depth of its coverage, and textbook-like in its wealth of worked examples and exercises. Each topic is clearly and comprehensively covered, from theory to hands-on working code. Professionals, students, educators, this is the Linux/UNIX reference that you have been waiting for." Anthony Robins, Associate Professor of Computer Science, The University of Otago "I've been very impressed by the precision, the quality and the level of detail Michael Kerrisk put in his book. He is a great expert of Linux system calls and lets us share his knowledge and understanding of the Linux APIs." Christophe Blaess, Author of Programmation systeme en C sous Linux ". . . an essential resource for the serious or professional Linux and UNIX systems programmer. Michael Kerrisk covers the use of all the key APIs across both the Linux and UNIX system interfaces with clear descriptions and tutorial examples and stresses the importance and benefits of following standards such as the Single UNIX Specification and POSIX 1003.1." Andrew Josey, Director, Standards, The Open Group, and Chair of the POSIX 1003.1 Working Group "What could be better than an encyclopedic reference to the Linux system, from the standpoint of the system programmer, written by none other than the maintainer of the man pages himself? The Linux Programming Interface is comprehensive and detailed. I firmly expect it to become an indispensable addition to my programming bookshelf." Bill Gallmeister, Author of POSIX.4 Programmer's Guide: Programming for the Real World ". . . the most complete and up-to-date book about Linux and UNIX system programming. If you're new to Linux system programming, if you're a UNIX veteran focused on portability while interested in learning the Linux way, or if you're simply looking for an excellent reference about the Linux programming interface, then Michael Kerrisk's book is definitely the companion you want on your bookshelf." Loic Domaigne, Chief Software Architect (Embedded), Corpuls.com}
}
@misc{general-spec,
  title = {{General Information}},
  howpublished = {\\ \url{https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html}},
  note = {\\ Accessed: 28/04/2021}
}
@bachelorsthesis{julian-thesis,
  author       = {Julian PszczoÅ‚owski}, 
  title        = {{An overview of synchronization methods in Unix-like kernels and an implementation of turnstiles in Mimiker OS}},
  school       = {University of WrocÅ‚aw},
  year         = 2018,
  note         = {Written in Polish}
}
@misc{freebsd-locking,
  title = {{\texttt{locking} - kernel synchronization primitives}},
  howpublished = {\\ \url{https://www.freebsd.org/cgi/man.cgi?query=locking&manpath=FreeBSD+12.2-RELEASE+and+Ports}},
  note = {\\ Accessed: 19/05/2021}
}
@misc{libterminfo,
  title = {{Terminal Information Library}},
  howpublished = {\\ \url{https://man.netbsd.org/terminfo.3}},
  note = {\\ Accessed: 20/05/2021}
}